#!/usr/bin/python
# -*- coding: utf-8 -*-
## \file main.py
## \brief Louncher method

import os
import sys

if __name__ == "__main__":
	if os.geteuid() != 0:
		print "this program requires super user priv."
		sys.exit(1)

from ReadConn import ReadConn
from RdList import RdList
from BlockDom import BlockDom
import multiprocessing
from Queue import Empty, Full
import signal
import time
import sys
import re

def signalHandler(signal, frame):
	""" Signal catcher
	\param signal Signal sended
	\param frame Name of function
	"""
	oid=os.getpid()	
	qi.put("END")	
	qi.put("END")	
	qi.put("END")
	for line in os.popen("ps -Al"):
		fields = line.split()
		ppid = fields[4]
		name = fields[-1]
		if name == "tshark" and int(ppid) == oid:
			os.kill(int(fields[3]),2)

def b(qi,qo):
	bd=BlockDom()
	ls=RdList().loadLsNst()
	while True:
		cn=qo.get(True)
		bd.unBlAll()
		if cn == "ReadConnEND":
			print("Blocker ending!")
			bd.unBlAll()
			return
		for i in ls:
			m = re.search("(^| |,|\.)" + i + "( |$|,|\.|\\\\)",cn,re.IGNORECASE)
			if m is not None:
				print i + " FOUNDED in " + cn
				bd.blAll()
				break

def f(qi,qo):
	r=ReadConn()
	r.getCt(qi,qo)

def t(qi,qo):
	while True:
		time.sleep(10)
		qo.put("Wake")
		try:
			inp=qi.get(0)
		except Empty:
			continue
		else:
			if inp == "END":
				print("Getter ending")
				qo.put("ReadConnEND")
				return

if __name__ == "__main__":
	if os.geteuid() != 0:
		print "this program requires super user priv."
		sys.exit(1)
	signal.signal(signal.SIGINT, signalHandler)
	signal.signal(signal.SIGQUIT, signalHandler)


	## Input queue
	global qi
	qi = multiprocessing.Queue()
	qi.cancel_join_thread()
	## Output queue
	global qo 
	qo = multiprocessing.Queue()
	qo.cancel_join_thread()

	gen=multiprocessing.Process(target=f,args=[qi,qo])
	blo=multiprocessing.Process(target=b,args=[qi,qo])
	tim=multiprocessing.Process(target=t,args=[qi,qo])

	tim.start()
	gen.start()
	blo.start()

	gen.join()
	blo.join()
	tim.join()
